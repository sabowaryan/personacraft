// Script pour tester sp√©cifiquement le flow Qloo First avec contraintes culturelles
async function testQlooFirstCulturalConstraints() {
  try {
    console.log('üß™ Test du flow Qloo First avec contraintes culturelles...');
    
    // Donn√©es de test pour un brief fran√ßais
    const testBriefData = {
      brief: "Cr√©er des personas pour une marque de mode fran√ßaise ciblant les jeunes urbains parisiens passionn√©s de streetwear et de culture hip-hop",
      ageRange: { min: 18, max: 30 },
      location: "Paris, France",
      language: "fr",
      personaCount: 2,
      interests: ["streetwear", "hip-hop", "mode urbaine", "sneakers"],
      values: ["authenticit√©", "cr√©ativit√©", "individualit√©"]
    };
    
    console.log('üìù Brief de test:', {
      brief: testBriefData.brief.substring(0, 100) + '...',
      location: testBriefData.location,
      ageRange: testBriefData.ageRange,
      personaCount: testBriefData.personaCount,
      interests: testBriefData.interests,
      values: testBriefData.values
    });
    
    const response = await fetch('http://localhost:3000/api/generate-personas', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testBriefData)
    });
    
    console.log('üì° Status:', response.status);
    console.log('üì° Headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      
      console.log('‚úÖ Response received successfully');
      console.log('üéØ Generation metadata:', {
        source: data.generation?.source,
        method: data.generation?.method,
        processingTime: data.generation?.processingTime,
        personaCount: data.generation?.personaCount
      });
      
      console.log('üåç Cultural data sources:', {
        qloo: data.sources?.qloo,
        culturalData: data.sources?.culturalData
      });
      
      console.log('üé® Cultural constraints:', {
        applied: data.culturalConstraints?.applied,
        count: data.culturalConstraints?.count
      });
      
      console.log('üö© Feature flags:', data.featureFlags);
      
      if (data.validation) {
        console.log('‚úÖ Validation results:', {
          enabled: data.validation.enabled,
          isValid: data.validation.isValid,
          score: data.validation.score,
          errorCount: data.validation.errorCount,
          templateId: data.validation.templateId
        });
      }
      
      // Analyser les personas g√©n√©r√©s
      if (data.personas && data.personas.length > 0) {
        console.log(`\nüë• ${data.personas.length} personas g√©n√©r√©s:`);
        
        data.personas.forEach((persona: any, index: number) => {
          console.log(`\n--- Persona ${index + 1}: ${persona.name} ---`);
          console.log(`Age: ${persona.age}, M√©tier: ${persona.occupation}`);
          console.log(`Bio: ${persona.bio}`);
          
          if (persona.culturalData) {
            console.log('üé® Donn√©es culturelles:');
            Object.entries(persona.culturalData).forEach(([category, items]: [string, any]) => {
              if (Array.isArray(items) && items.length > 0) {
                console.log(`  ${category}: ${items.slice(0, 3).join(', ')}${items.length > 3 ? '...' : ''}`);
              }
            });
          }
          
          if (persona.psychographics) {
            console.log('üß† Psychographics:');
            console.log(`  Personnalit√©: ${persona.psychographics.personality?.join(', ') || 'N/A'}`);
            console.log(`  Valeurs: ${persona.psychographics.values?.join(', ') || 'N/A'}`);
            console.log(`  Int√©r√™ts: ${persona.psychographics.interests?.join(', ') || 'N/A'}`);
          }
          
          if (persona.metadata) {
            console.log('üìä Metadata:');
            console.log(`  M√©thode: ${persona.metadata.generationMethod}`);
            console.log(`  Source culturelle: ${persona.metadata.culturalDataSource}`);
            console.log(`  Contraintes Qloo: ${persona.metadata.qlooConstraintsUsed?.join(', ') || 'Aucune'}`);
          }
        });
        
        // V√©rifications sp√©cifiques pour les contraintes culturelles
        console.log('\nüîç V√©rification des contraintes culturelles:');
        
        const hasQlooData = data.sources?.qloo === true;
        const usesQlooFirst = data.generation?.method === 'qloo-first';
        const hasCulturalConstraints = data.culturalConstraints?.applied && data.culturalConstraints.applied.length > 0;
        
        console.log(`‚úÖ Utilise Qloo First: ${usesQlooFirst ? '‚úì' : '‚úó'}`);
        console.log(`‚úÖ Donn√©es Qloo utilis√©es: ${hasQlooData ? '‚úì' : '‚úó'}`);
        console.log(`‚úÖ Contraintes culturelles appliqu√©es: ${hasCulturalConstraints ? '‚úì' : '‚úó'}`);
        
        // V√©rifier si les personas contiennent des donn√©es culturelles coh√©rentes
        const personasWithCulturalData = data.personas.filter((p: any) => 
          p.culturalData && Object.values(p.culturalData).some((items: any) => 
            Array.isArray(items) && items.length > 0
          )
        );
        
        console.log(`‚úÖ Personas avec donn√©es culturelles: ${personasWithCulturalData.length}/${data.personas.length}`);
        
        // V√©rifier la coh√©rence avec le brief (Paris, streetwear, hip-hop)
        const parisianPersonas = data.personas.filter((p: any) => 
          p.location?.toLowerCase().includes('paris') || 
          p.bio?.toLowerCase().includes('paris')
        );
        
        const streetwearPersonas = data.personas.filter((p: any) => 
          JSON.stringify(p).toLowerCase().includes('streetwear') ||
          JSON.stringify(p).toLowerCase().includes('urbain') ||
          JSON.stringify(p).toLowerCase().includes('hip-hop')
        );
        
        console.log(`‚úÖ Personas parisiens: ${parisianPersonas.length}/${data.personas.length}`);
        console.log(`‚úÖ Personas avec culture streetwear/hip-hop: ${streetwearPersonas.length}/${data.personas.length}`);
        
      } else {
        console.log('‚ùå Aucun persona g√©n√©r√©');
      }
      
    } else {
      const errorData = await response.json();
      console.log('‚ùå Error response:', JSON.stringify(errorData, null, 2));
      
      if (errorData.featureFlags) {
        console.log('üö© Feature flags dans l\'erreur:', errorData.featureFlags);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Fetch error:', error);
  }
}

// Fonction pour tester avec diff√©rents contextes
async function testMultipleContexts() {
  console.log('\nüß™ Test avec diff√©rents contextes...\n');
  
  const testCases = [
    {
      name: "Contexte B2B Tech",
      data: {
        brief: "Cr√©er des personas B2B pour une solution SaaS de gestion d'√©quipe ciblant les directeurs marketing dans les startups tech fran√ßaises",
        ageRange: { min: 30, max: 45 },
        location: "Lyon, France",
        language: "fr",
        personaCount: 1,
        interests: ["technologie", "management", "innovation"],
        values: ["efficacit√©", "collaboration", "croissance"]
      }
    },
    {
      name: "Contexte Simple",
      data: {
        brief: "Personas pour une boulangerie locale",
        ageRange: { min: 25, max: 55 },
        location: "Bordeaux, France",
        language: "fr",
        personaCount: 1,
        interests: [],
        values: []
      }
    }
  ];
  
  for (const testCase of testCases) {
    console.log(`\n--- Test: ${testCase.name} ---`);
    
    try {
      const response = await fetch('http://localhost:3000/api/generate-personas', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testCase.data)
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ ${testCase.name}: ${data.generation?.method} - ${data.personas?.length || 0} personas`);
        console.log(`   Qloo utilis√©: ${data.sources?.qloo ? '‚úì' : '‚úó'}`);
        console.log(`   Template: ${data.validation?.templateId || 'N/A'}`);
      } else {
        console.log(`‚ùå ${testCase.name}: Erreur ${response.status}`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${testCase.name}: ${error}`);
    }
    
    // Pause entre les tests
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// Ex√©cuter les tests
async function runAllTests() {
  await testQlooFirstCulturalConstraints();
  await testMultipleContexts();
}

runAllTests();