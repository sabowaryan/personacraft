/**
 * Script de migration pour mettre √† jour les m√©tadonn√©es des personas existants
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migratePersonasMetadata() {
  console.log('üîÑ D√©but de la migration des m√©tadonn√©es des personas...\n');

  try {
    // R√©cup√©rer tous les personas
    const personas = await prisma.persona.findMany({
      select: {
        id: true,
        name: true,
        generationMetadata: true,
        culturalDataSource: true,
        templateUsed: true,
        processingTime: true,
        createdAt: true
      }
    });

    console.log(`üìä ${personas.length} personas trouv√©s`);

    let updatedCount = 0;
    let skippedCount = 0;

    for (const persona of personas) {
      // V√©rifier si le persona a d√©j√† des m√©tadonn√©es de g√©n√©ration
      const hasGenerationMetadata = persona.generationMetadata && 
        typeof persona.generationMetadata === 'object' && 
        'generationMethod' in persona.generationMetadata;

      if (hasGenerationMetadata) {
        console.log(`‚è≠Ô∏è  Persona "${persona.name}" a d√©j√† des m√©tadonn√©es, ignor√©`);
        skippedCount++;
        continue;
      }

      // D√©terminer la m√©thode de g√©n√©ration bas√©e sur les donn√©es existantes
      let generationMethod = 'unknown';
      let culturalDataSource = persona.culturalDataSource || 'unknown';
      let templateUsed = persona.templateUsed || 'unknown';

      // Si le persona a des donn√©es culturelles, il a probablement √©t√© g√©n√©r√© avec Qloo
      if (persona.culturalDataSource && persona.culturalDataSource !== 'unknown') {
        generationMethod = 'qloo-first';
      } else {
        // V√©rifier la date de cr√©ation pour estimer la m√©thode
        const createdAt = new Date(persona.createdAt);
        const now = new Date();
        const daysSinceCreation = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24));

        // Si cr√©√© r√©cemment (moins de 7 jours), probablement qloo-first
        if (daysSinceCreation < 7) {
          generationMethod = 'qloo-first';
          culturalDataSource = 'qloo';
        } else {
          generationMethod = 'legacy-fallback';
          culturalDataSource = 'fallback';
        }
      }

      // Mettre √† jour les m√©tadonn√©es
      const updatedGenerationMetadata = {
        source: generationMethod,
        method: generationMethod,
        culturalConstraintsUsed: [],
        processingTime: persona.processingTime || 0,
        qlooDataUsed: culturalDataSource === 'qloo',
        templateUsed: templateUsed,
        generatedAt: persona.createdAt.toISOString(),
        qlooApiCallsCount: culturalDataSource === 'qloo' ? 1 : 0,
        retryCount: 0
      };

      await prisma.persona.update({
        where: { id: persona.id },
        data: {
          generationMetadata: updatedGenerationMetadata,
          culturalDataSource: culturalDataSource,
          templateUsed: templateUsed
        }
      });

      console.log(`‚úÖ Persona "${persona.name}" mis √† jour avec ${generationMethod}`);
      updatedCount++;
    }

    console.log(`\nüìà Migration termin√©e:`);
    console.log(`   ‚úÖ ${updatedCount} personas mis √† jour`);
    console.log(`   ‚è≠Ô∏è  ${skippedCount} personas ignor√©s (d√©j√† √† jour)`);
    console.log(`   üìä Total: ${personas.length} personas trait√©s`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la migration
migratePersonasMetadata().catch(console.error); 