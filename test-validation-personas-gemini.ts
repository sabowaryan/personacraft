/**
 * Test complet de validation des personas g√©n√©r√©es par Gemini
 * Teste les 3 templates Qloo First, simule une r√©ponse Gemini, et teste une validation r√©elle
 */

// Load environment variables
import * as dotenv from 'dotenv';
dotenv.config();

import { PersonaValidator, PersonaValidationError } from './src/lib/validators/persona-validator.js';
import { GeminiClient } from './src/lib/api/gemini/client.js';
import fs from 'fs';
import path from 'path';


console.log('üß™ Test de validation des personas Gemini - D√©but\n');

// Fonction utilitaire pour lire les templates
function readTemplate(templatePath: string): string {
  const fullPath = path.join(process.cwd(), templatePath);
  return fs.readFileSync(fullPath, 'utf-8');
}

// Test 1: Validation des 3 templates Qloo First
async function testTemplatesValidation() {
  console.log('üìã Test 1: Validation des 3 templates Qloo First\n');

  const templates = [
    { name: 'Qloo First Persona', path: 'public/templates/qloo-first-persona.template' },
    { name: 'Qloo First B2B Persona', path: 'public/templates/qloo-first-b2b-persona.template' },
    { name: 'Qloo First Simple', path: 'public/templates/qloo-first-simple-persona.template' }
  ];

  for (const template of templates) {
    try {
      console.log(`üîç Test du template: ${template.name}`);
      const content = readTemplate(template.path);

      // V√©rifier la structure du template
      const hasPersonaCount = content.includes('{{personaCount}}');
      const hasBrief = content.includes('{{brief}}');
      const hasJsonFormat = content.includes('[') && content.includes('{') && content.includes('"id":');

      console.log(`  ‚úÖ Contient {{personaCount}}: ${hasPersonaCount}`);
      console.log(`  ‚úÖ Contient {{brief}}: ${hasBrief}`);
      console.log(`  ‚úÖ Format JSON d√©fini: ${hasJsonFormat}`);

      // V√©rifier les champs requis dans le template
      const requiredFields = ['name', 'age', 'occupation', 'location', 'bio', 'quote'];
      const missingFields = requiredFields.filter(field => !content.includes(`"${field}"`));

      if (missingFields.length === 0) {
        console.log(`  ‚úÖ Tous les champs requis pr√©sents`);
      } else {
        console.log(`  ‚ö†Ô∏è Champs manquants: ${missingFields.join(', ')}`);
      }

      console.log('');
    } catch (error) {
      console.error(`  ‚ùå Erreur lors de la lecture du template ${template.name}:`, error);
    }
  }
}

// Test 2: Simulation de r√©ponse Gemini avec diff√©rents formats
async function testGeminiResponseSimulation() {
  console.log('ü§ñ Test 2: Simulation de r√©ponses Gemini\n');

  // R√©ponse Gemini valide (format standard)
  const validGeminiResponse = `[
  {
    "id": "persona-1",
    "name": "Sophie Martin",
    "age": 32,
    "occupation": "Chef de projet digital",
    "location": "Lyon, France",
    "bio": "Professionnelle dynamique sp√©cialis√©e dans la transformation digitale des entreprises.",
    "quote": "L'innovation commence par comprendre les vrais besoins utilisateurs.",
    "demographics": {
      "income": "45000-55000‚Ç¨",
      "education": "Master en Management Digital",
      "familyStatus": "En couple, sans enfants"
    },
    "psychographics": {
      "personality": ["Analytique", "Cr√©ative", "Organis√©e"],
      "values": ["Innovation", "Efficacit√©", "Collaboration"],
      "interests": ["Technologie", "Design UX", "Startups"],
      "lifestyle": "Urbaine active, passionn√©e de nouvelles technologies"
    },
    "painPoints": [
      "Manque de temps pour se former aux nouvelles technologies",
      "Difficult√© √† convaincre les √©quipes du changement",
      "Budget limit√© pour les outils innovants"
    ],
    "goals": [
      "Devenir experte en IA appliqu√©e au business",
      "Diriger une √©quipe de transformation digitale",
      "Lancer sa propre startup tech"
    ],
    "marketingInsights": {
      "preferredChannels": ["LinkedIn", "Newsletters tech", "Webinaires"],
      "messagingTone": "Professionnel mais accessible",
      "buyingBehavior": "Recherche approfondie, comparaison d√©taill√©e, d√©cision rapide"
    },
    "qualityScore": 87
  }
]`;

  // R√©ponse Gemini avec format markdown (probl√©matique)
  const geminiWithMarkdown = `\`\`\`json
[
  {
    "name": "Marc Dubois",
    "age": 28,
    "occupation": "D√©veloppeur Full Stack",
    "location": "Paris, France",
    "bio": "D√©veloppeur passionn√© par les technologies √©mergentes.",
    "quote": "Le code propre est la base de tout projet r√©ussi.",
    "demographics": {
      "income": "40000-50000‚Ç¨",
      "education": "√âcole d'ing√©nieur",
      "familyStatus": "C√©libataire"
    },
    "psychographics": {
      "personality": ["Logique", "Curieux", "Perfectionniste"],
      "values": ["Qualit√©", "Innovation", "Apprentissage"],
      "interests": ["Programmation", "Open Source", "Gaming"],
      "lifestyle": "Geek urbain, toujours connect√©"
    },
    "painPoints": [
      "Veille technologique chronophage",
      "Syndrome de l'imposteur",
      "√âquilibre vie pro/perso difficile"
    ],
    "goals": [
      "Ma√Ætriser l'architecture cloud",
      "Contribuer √† des projets open source majeurs",
      "Cr√©er sa propre application"
    ],
    "marketingInsights": {
      "preferredChannels": ["GitHub", "Stack Overflow", "Twitter tech"],
      "messagingTone": "Technique et direct",
      "buyingBehavior": "Teste avant d'acheter, influence par la communaut√©"
    },
    "qualityScore": 82
  }
]
\`\`\``;

  // R√©ponse Gemini malform√©e (JSON cass√©)
  const malformedGeminiResponse = `[
  {
    "name": "Julie Leroy",
    "age": 35,
    "occupation": "Directrice Marketing"
    "location": "Bordeaux, France",
    "bio": "Experte en marketing digital avec 10 ans d'exp√©rience.",
    "quote": "La cr√©ativit√© sans donn√©es n'est que de l'art.",
    "demographics": {
      "income": "60000-70000‚Ç¨",
      "education": "Master Marketing",
      "familyStatus": "Mari√©e, 1 enfant"
    },
    // Commentaire qui casse le JSON
    "psychographics": {
      "personality": ["Cr√©ative", "Strat√©gique", "Empathique"],
      "values": ["Authenticit√©", "Performance", "√âquipe"],
      "interests": ["Marketing", "Psychologie", "Art"],
      "lifestyle": "√âquilibre famille-carri√®re"
    },
    "painPoints": [
      "ROI difficile √† mesurer",
      "√âvolution rapide des plateformes",
      "Gestion d'√©quipe √† distance"
    ],
    "goals": [
      "Optimiser les conversions de 25%",
      "D√©velopper une strat√©gie omnicanale",
      "Former son √©quipe aux nouveaux outils"
    ],
    "marketingInsights": {
      "preferredChannels": ["LinkedIn", "Email", "Podcasts"],
      "messagingTone": "Inspirant et data-driven",
      "buyingBehavior": "Analyse concurrentielle pouss√©e"
    },
    "qualityScore": 89
  }
]`;

  const testCases = [
    { name: 'R√©ponse valide standard', response: validGeminiResponse, shouldSucceed: true },
    { name: 'R√©ponse avec markdown', response: geminiWithMarkdown, shouldSucceed: true },
    { name: 'R√©ponse malform√©e', response: malformedGeminiResponse, shouldSucceed: false }
  ];

  for (const testCase of testCases) {
    console.log(`üß™ Test: ${testCase.name}`);
    try {
      const personas = PersonaValidator.parseGeminiResponse(testCase.response, "Test brief");
      console.log(`  ‚úÖ Parsing r√©ussi: ${personas.length} persona(s) g√©n√©r√©(s)`);

      if (personas.length > 0) {
        const firstPersona = personas[0];
        console.log(`  üìä Premier persona: ${firstPersona.name}, ${firstPersona.age} ans`);
        console.log(`  üìà Score qualit√©: ${firstPersona.qualityScore}`);
      }
    } catch (error) {
      if (testCase.shouldSucceed) {
        console.log(`  ‚ùå √âchec inattendu: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      } else {
        console.log(`  ‚úÖ √âchec attendu: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      }
    }
    console.log('');
  }
}

// Test 3: Test de validation avec le validateur legacy (plus permissif)
async function testLegacyValidation() {
  console.log('üîÑ Test 3: Validation legacy (plus permissive)\n');

  // Persona avec structure legacy (champs optionnels)
  const legacyPersonaResponse = `[
  {
    "name": "Antoine Moreau",
    "age": 42,
    "occupation": "Directeur Commercial",
    "jobTitle": "Directeur Commercial",
    "industry": "SaaS",
    "seniority": "Director",
    "location": "Nantes, France",
    "email": "antoine.moreau@saascompany.fr",
    "company": {
      "name": "SaaS Solutions",
      "size": "100-500 employ√©s",
      "industry": "Logiciel",
      "location": "Nantes, France"
    },
    "bio": "Directeur commercial exp√©riment√© dans le secteur SaaS B2B.",
    "quote": "Vendre, c'est avant tout comprendre et r√©soudre un probl√®me.",
    "demographics": {
      "income": "80000-100000‚Ç¨",
      "education": "√âcole de Commerce",
      "familyStatus": "Mari√©, 2 enfants",
      "experience": 15
    },
    "psychographics": {
      "personality": ["Persuasif", "Relationnel", "Ambitieux"],
      "values": ["Performance", "Relation client", "Croissance"],
      "interests": ["Vente", "N√©gociation", "Sport"],
      "lifestyle": "√âquilibre vie pro/perso avec focus performance",
      "workStyle": "Orient√© r√©sultats avec approche collaborative"
    },
    "professionalProfile": {
      "experience": 15,
      "skills": ["Vente B2B", "N√©gociation", "Management", "CRM"],
      "responsibilities": ["√âquipe commerciale", "Objectifs CA", "Strat√©gie vente"],
      "decisionMakingAuthority": "High"
    },
    "businessPainPoints": [
      "Cycles de vente trop longs",
      "Qualification des leads insuffisante",
      "Concurrence accrue sur le march√©"
    ],
    "businessGoals": [
      "R√©duire le cycle de vente de 20%",
      "Augmenter le taux de conversion de 15%",
      "D√©velopper 3 nouveaux segments"
    ],
    "painPoints": [
      "Cycles de vente trop longs",
      "Qualification des leads insuffisante",
      "Concurrence accrue sur le march√©"
    ],
    "goals": [
      "R√©duire le cycle de vente de 20%",
      "Augmenter le taux de conversion de 15%",
      "D√©velopper 3 nouveaux segments"
    ],
    "decisionMaking": {
      "process": "Analyse ROI puis validation direction",
      "timeline": "2-4 mois",
      "stakeholders": ["Direction", "IT", "Finance"]
    },
    "buyingBehavior": "Analyse comparative d√©taill√©e avec focus ROI",
    "marketingInsights": {
      "preferredChannels": ["LinkedIn", "Salons professionnels"],
      "messagingTone": "Business et orient√© r√©sultats",
      "buyingBehavior": "Analyse comparative d√©taill√©e avec focus ROI"
    },
    "qualityScore": 91
  }
]`;

  console.log('üß™ Test validation standard vs legacy');

  try {
    // Test avec validation standard
    console.log('üìä Validation standard:');
    const standardResult = PersonaValidator.parseGeminiResponse(legacyPersonaResponse, "Test B2B brief");
    console.log(`  ‚úÖ R√©ussi: ${standardResult.length} persona(s)`);
  } catch (error) {
    console.log(`  ‚ùå √âchec validation standard: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }

  try {
    // Test avec validation legacy
    console.log('üìä Validation legacy:');
    const legacyResult = PersonaValidator.parseGeminiResponseLegacy(legacyPersonaResponse, "Test B2B brief");
    console.log(`  ‚úÖ R√©ussi: ${legacyResult.length} persona(s)`);

    if (legacyResult.length > 0) {
      const persona = legacyResult[0];
      const jobTitle = (persona as any).jobTitle || persona.occupation;
      const company = (persona as any).company;
      console.log(`  ÔøΩ Pcersona: ${persona.name} (${jobTitle})`);
      if (company) {
        console.log(`  üè¢ Entreprise: ${company.name} (${company.size})`);
      }
      console.log(`  üìà Score: ${persona.qualityScore}`);
    }
  } catch (error) {
    console.log(`  ‚ùå √âchec validation legacy: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }

  console.log('');
}

// Test 4: Test de validation r√©elle avec l'API Gemini
async function testRealGeminiValidation() {
  console.log('üîç Test 4: Validation r√©elle avec l\'API Gemini\n');

  // V√©rifier si la cl√© API est disponible
  if (!process.env.GEMINI_API_KEY) {
    console.log('‚ö†Ô∏è GEMINI_API_KEY non d√©finie - Test ignor√©');
    return;
  }

  try {
    console.log('üîë Cl√© API Gemini d√©tect√©e');
    const geminiClient = new GeminiClient();

    // Test de connexion
    console.log('üîó Test de connexion...');
    const isConnected = await geminiClient.testConnection();
    console.log(`  ${isConnected ? '‚úÖ' : '‚ùå'} Connexion: ${isConnected ? 'R√©ussie' : '√âchec'}`);

    if (!isConnected) {
      console.log('‚ùå Impossible de se connecter √† Gemini - Test arr√™t√©');
      return;
    }

    // Test de g√©n√©ration avec diff√©rents briefs
    const testBriefs = [
      {
        name: "Brief simple",
        brief: "Application mobile de fitness pour jeunes professionnels urbains",
        options: { useLegacyValidation: false }
      },
      {
        name: "Brief B2B complexe",
        brief: "Plateforme SaaS de gestion de projet pour √©quipes de d√©veloppement agiles",
        options: { useLegacyValidation: true }
      },
      {
        name: "Brief avec contraintes culturelles",
        brief: "Service de livraison de repas bio pour familles fran√ßaises soucieuses de l'environnement",
        options: { useLegacyValidation: false }
      }
    ];

    for (const testBrief of testBriefs) {
      console.log(`\nüß™ Test: ${testBrief.name}`);
      console.log(`üìù Brief: "${testBrief.brief}"`);
      console.log(`üîß Validation legacy: ${testBrief.options.useLegacyValidation}`);

      try {
        const startTime = Date.now();
        const personas = await geminiClient.generatePersonas(
          testBrief.brief,
          undefined,
          testBrief.options
        );
        const duration = Date.now() - startTime;

        console.log(`  ‚è±Ô∏è Dur√©e: ${duration}ms`);
        console.log(`  ‚úÖ G√©n√©ration r√©ussie: ${personas.length} persona(s)`);

        // Analyser les personas g√©n√©r√©s
        if (personas.length > 0) {
          const firstPersona = personas[0];
          console.log(`  üë§ Premier persona: ${firstPersona.name}`);
          console.log(`  üìä √Çge: ${firstPersona.age} ans`);
          console.log(`  üíº M√©tier: ${firstPersona.occupation}`);
          console.log(`  üìç Localisation: ${firstPersona.location}`);
          console.log(`  üìà Score qualit√©: ${firstPersona.qualityScore}`);

          // V√©rifier la structure
          const hasRequiredFields = !!(
            firstPersona.name &&
            firstPersona.age &&
            firstPersona.occupation &&
            firstPersona.bio &&
            firstPersona.demographics &&
            firstPersona.psychographics &&
            firstPersona.painPoints &&
            firstPersona.goals &&
            firstPersona.marketingInsights
          );

          console.log(`  üèóÔ∏è Structure compl√®te: ${hasRequiredFields ? '‚úÖ' : '‚ùå'}`);

          // Analyser le score de qualit√©
          if (firstPersona.qualityScore !== undefined) {
            if (firstPersona.qualityScore === 0) {
              console.log(`  üö® PROBL√àME: Score de qualit√© = 0 (√©chec de validation)`);
            } else if (firstPersona.qualityScore < 70) {
              console.log(`  ‚ö†Ô∏è Score faible: ${firstPersona.qualityScore} (< 70)`);
            } else if (firstPersona.qualityScore >= 85) {
              console.log(`  üéØ Excellent score: ${firstPersona.qualityScore} (‚â• 85)`);
            } else {
              console.log(`  ‚úÖ Score correct: ${firstPersona.qualityScore} (70-84)`);
            }
          }
        }

      } catch (error) {
        console.log(`  ‚ùå Erreur g√©n√©ration: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);

        // Analyser le type d'erreur
        if (error instanceof PersonaValidationError) {
          console.log(`  üîç Type: Erreur de validation`);
        } else if (error instanceof Error && error.message.includes('API')) {
          console.log(`  üîç Type: Erreur API Gemini`);
        } else {
          console.log(`  üîç Type: Erreur inconnue`);
        }
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test Gemini:', error);
  }
}

// Test 5: Test de performance et de coh√©rence
async function testPerformanceAndConsistency() {
  console.log('‚ö° Test 5: Performance et coh√©rence\n');

  if (!process.env.GEMINI_API_KEY) {
    console.log('‚ö†Ô∏è GEMINI_API_KEY non d√©finie - Test ignor√©');
    return;
  }

  try {
    const geminiClient = new GeminiClient();
    const testBrief = "Application de m√©ditation pour professionnels stress√©s";

    console.log('üîÑ Test de coh√©rence (3 g√©n√©rations identiques)');
    const results = [];

    for (let i = 1; i <= 3; i++) {
      console.log(`  üìä G√©n√©ration ${i}/3...`);
      const startTime = Date.now();

      try {
        const personas = await geminiClient.generatePersonas(testBrief);
        const duration = Date.now() - startTime;

        results.push({
          success: true,
          duration,
          count: personas.length,
          avgQuality: personas.reduce((sum, p) => sum + (p.qualityScore || 0), 0) / personas.length,
          firstPersonaName: personas[0]?.name || 'N/A'
        });

        console.log(`    ‚úÖ R√©ussi en ${duration}ms - ${personas.length} personas`);
      } catch (error) {
        results.push({
          success: false,
          duration: Date.now() - startTime,
          count: 0,
          avgQuality: 0,
          firstPersonaName: 'N/A',
          error: error instanceof Error ? error.message : 'Erreur inconnue'
        });

        console.log(`    ‚ùå √âchec: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      }

      // Pause entre les appels pour √©viter le rate limiting
      if (i < 3) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    // Analyser les r√©sultats
    console.log('\nüìà Analyse des r√©sultats:');
    const successfulResults = results.filter(r => r.success);

    if (successfulResults.length > 0) {
      const avgDuration = successfulResults.reduce((sum, r) => sum + r.duration, 0) / successfulResults.length;
      const avgCount = successfulResults.reduce((sum, r) => sum + r.count, 0) / successfulResults.length;
      const avgQuality = successfulResults.reduce((sum, r) => sum + r.avgQuality, 0) / successfulResults.length;

      console.log(`  ‚è±Ô∏è Dur√©e moyenne: ${Math.round(avgDuration)}ms`);
      console.log(`  üìä Nombre moyen de personas: ${avgCount.toFixed(1)}`);
      console.log(`  üìà Score qualit√© moyen: ${avgQuality.toFixed(1)}`);
      console.log(`  ‚úÖ Taux de r√©ussite: ${(successfulResults.length / results.length * 100).toFixed(1)}%`);

      // V√©rifier la coh√©rence des noms (indicateur de vari√©t√©)
      const uniqueNames = new Set(successfulResults.map(r => r.firstPersonaName));
      console.log(`  üé≠ Vari√©t√© des personas: ${uniqueNames.size}/${successfulResults.length} noms uniques`);
    } else {
      console.log('  ‚ùå Aucune g√©n√©ration r√©ussie');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test de performance:', error);
  }
}

// Test 6: Test des edge cases et gestion d'erreurs
async function testEdgeCases() {
  console.log('üö® Test 6: Edge cases et gestion d\'erreurs\n');

  const edgeCases = [
    {
      name: 'Brief vide',
      brief: '',
      shouldFail: false // Le validateur accepte les briefs vides avec des donn√©es mock compl√®tes
    },
    {
      name: 'Brief tr√®s court',
      brief: 'App',
      shouldFail: false
    },
    {
      name: 'Brief tr√®s long',
      brief: 'Application mobile r√©volutionnaire de gestion de projet collaborative avec intelligence artificielle int√©gr√©e pour les √©quipes distribu√©es travaillant sur des projets complexes n√©cessitant une coordination pr√©cise et des outils de communication avanc√©s permettant le suivi en temps r√©el des t√¢ches, la gestion des ressources, l\'analyse pr√©dictive des d√©lais, l\'optimisation automatique des workflows, l\'int√©gration avec les syst√®mes existants, la s√©curit√© enterprise-grade, la conformit√© r√©glementaire, et une exp√©rience utilisateur exceptionnelle sur tous les appareils et plateformes.',
      shouldFail: false
    },
    {
      name: 'Brief avec caract√®res sp√©ciaux',
      brief: 'App de fitness üí™ pour les 18-25 ans üèÉ‚Äç‚ôÇÔ∏è avec IA & ML',
      shouldFail: false
    },
    {
      name: 'Brief en anglais',
      brief: 'AI-powered fitness tracking app for young professionals',
      shouldFail: false
    }
  ];

  for (const testCase of edgeCases) {
    console.log(`üß™ Test: ${testCase.name}`);
    console.log(`üìù Brief: "${testCase.brief}"`);

    try {
      // Test du parsing avec une r√©ponse simul√©e
      const mockResponse = `[{
                "name": "Test User",
                "age": 25,
                "occupation": "Test Occupation",
                "location": "Test City",
                "bio": "Test bio d√©taill√©e avec plus de 10 caract√®res pour respecter la validation",
                "quote": "Test quote inspirante",
                "demographics": {
                  "income": "30000-40000‚Ç¨",
                  "education": "Master Test",
                  "familyStatus": "C√©libataire"
                },
                "psychographics": {
                  "personality": ["Test", "Analytique"],
                  "values": ["Innovation", "Qualit√©"],
                  "interests": ["Technologie", "Sport"],
                  "lifestyle": "Urbain et connect√©"
                },
                "painPoints": ["Test pain point d√©taill√©"],
                "goals": ["Test goal sp√©cifique"],
                "marketingInsights": {
                  "preferredChannels": ["LinkedIn", "Email"],
                  "messagingTone": "Professionnel",
                  "buyingBehavior": "Recherche approfondie avant achat"
                },
                "qualityScore": 75
            }]`;

      const personas = PersonaValidator.parseGeminiResponse(mockResponse, testCase.brief);

      if (testCase.shouldFail) {
        console.log(`  ‚ö†Ô∏è R√©ussite inattendue: ${personas.length} persona(s)`);
      } else {
        console.log(`  ‚úÖ R√©ussite attendue: ${personas.length} persona(s)`);
      }

    } catch (error) {
      if (testCase.shouldFail) {
        console.log(`  ‚úÖ √âchec attendu: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      } else {
        console.log(`  ‚ùå √âchec inattendu: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      }
    }

    console.log('');
  }
}

// Fonction principale d'ex√©cution des tests
async function runAllTests() {
  console.log('üöÄ D√©marrage de la suite de tests compl√®te\n');
  console.log('='.repeat(60));

  try {
    await testTemplatesValidation();
    console.log('='.repeat(60));

    await testGeminiResponseSimulation();
    console.log('='.repeat(60));

    await testLegacyValidation();
    console.log('='.repeat(60));

    await testRealGeminiValidation();
    console.log('='.repeat(60));

    await testPerformanceAndConsistency();
    console.log('='.repeat(60));

    await testEdgeCases();
    console.log('='.repeat(60));

    console.log('üéâ Suite de tests termin√©e avec succ√®s!');

  } catch (error) {
    console.error('üí• Erreur fatale lors des tests:', error);
    process.exit(1);
  }
}

// Ex√©cution des tests
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('üí• Erreur lors de l\'ex√©cution:', error);
    process.exit(1);
  });
}