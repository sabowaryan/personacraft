/**
 * B2B Persona Validation Template
 * Specialized validation rules for B2B personas with professional context
 * Adapted to work with the actual structure generated by Gemini
 */

import {
    ValidationTemplate,
    ValidationRule,
    ValidationRuleType,
    ValidationSeverity,
    PersonaType,
    FallbackStrategyType
} from '@/types/validation';

import { validateRequiredFields, validateCulturalDataStructure, validateJSONStructure } from '@/lib/validators/structure-validators';
import { validateAgeRange, validateLocationFormat, validateCulturalDataConsistency, validateIncomeRange, validateOccupationConsistency } from '@/lib/validators/content-validators';
import { validateEmailFormat, validatePhoneFormat, validateDateFormat, validateArrayFormat } from '@/lib/validators/format-validators';

/**
 * B2B persona template with professional-focused validation rules
 * Adapted to work with standard persona structure + B2B enhancements
 */
export const b2bPersonaTemplate: ValidationTemplate = {
    id: 'b2b-persona-v1',
    name: 'B2B Persona Validation',
    version: '1.0.0',
    personaType: PersonaType.B2B,
    rules: [
        // Ultra-permissive validation - only basic structure check
        {
            id: 'json-structure-basic',
            type: ValidationRuleType.STRUCTURE,
            field: 'root',
            validator: validateJSONStructure(),
            severity: ValidationSeverity.WARNING,
            message: 'JSON structure should be valid',
            required: false,
            priority: 1
        },

        // Optional B2B-specific validations (all warnings)
        {
            id: 'b2b-occupation-validation',
            type: ValidationRuleType.CONTENT,
            field: 'occupation',
            validator: validateB2BOccupation(),
            severity: ValidationSeverity.WARNING,
            message: 'Occupation should be professional and B2B-relevant',
            required: false,
            priority: 3
        },
        {
            id: 'b2b-pain-points-validation',
            type: ValidationRuleType.BUSINESS,
            field: 'painPoints',
            validator: validateB2BPainPoints(),
            severity: ValidationSeverity.WARNING,
            message: 'Pain points should be business-relevant',
            required: false,
            priority: 3
        },
        {
            id: 'b2b-goals-validation',
            type: ValidationRuleType.BUSINESS,
            field: 'goals',
            validator: validateB2BGoals(),
            severity: ValidationSeverity.WARNING,
            message: 'Goals should be business-oriented',
            required: false,
            priority: 3
        },
        {
            id: 'b2b-marketing-insights-validation',
            type: ValidationRuleType.BUSINESS,
            field: 'marketingInsights',
            validator: validateB2BMarketingInsights(),
            severity: ValidationSeverity.WARNING,
            message: 'Marketing insights should be B2B-focused',
            required: false,
            priority: 3
        },

        // Enhanced B2B fields (optional - if present, validate them)
        {
            id: 'b2b-company-structure',
            type: ValidationRuleType.STRUCTURE,
            field: 'company',
            validator: validateOptionalCompanyStructure(),
            severity: ValidationSeverity.WARNING,
            message: 'Company information should be properly structured if provided',
            required: false,
            priority: 4
        },
        {
            id: 'b2b-professional-profile',
            type: ValidationRuleType.STRUCTURE,
            field: 'professionalProfile',
            validator: validateOptionalProfessionalProfile(),
            severity: ValidationSeverity.WARNING,
            message: 'Professional profile should be properly structured if provided',
            required: false,
            priority: 4
        },

        // Format validations (all warnings)
        {
            id: 'email-format',
            type: ValidationRuleType.FORMAT,
            field: 'email',
            validator: validateEmailFormat(true),
            severity: ValidationSeverity.WARNING,
            message: 'Email should be in valid format',
            required: false,
            priority: 5
        },
        {
            id: 'phone-format',
            type: ValidationRuleType.FORMAT,
            field: 'phone',
            validator: validatePhoneFormat(['international', 'national']),
            severity: ValidationSeverity.WARNING,
            message: 'Phone should be in valid format',
            required: false,
            priority: 5
        },

        // Content validations (relaxed)
        {
            id: 'age-range-validation',
            type: ValidationRuleType.CONTENT,
            field: 'age',
            validator: validateAgeRange(16, 85), // Very wide range
            severity: ValidationSeverity.WARNING,
            message: 'Age should be within reasonable range (16-85)',
            required: false,
            priority: 2
        },
        {
            id: 'location-format-validation',
            type: ValidationRuleType.CONTENT,
            field: 'location',
            validator: validateLocationFormat(),
            severity: ValidationSeverity.WARNING,
            message: 'Location should be in standard format',
            required: false,
            priority: 4
        },
        {
            id: 'cultural-data-consistency',
            type: ValidationRuleType.CONTENT,
            field: 'culturalData',
            validator: validateCulturalDataConsistency(),
            severity: ValidationSeverity.WARNING,
            message: 'Cultural data should be consistent with persona context',
            required: false,
            priority: 4,
            timeout: 60000 // 60 secondes
        }
    ],
    fallbackStrategy: {
        type: FallbackStrategyType.SIMPLE_TEMPLATE,
        maxRetries: 2,
        fallbackTemplate: 'simple-persona-v1',
        retryDelay: 1000,
        backoffMultiplier: 1.5
    },
    metadata: {
        createdAt: Date.now(),
        updatedAt: Date.now(),
        author: 'Qloo Validation System',
        description: 'Adapted B2B validation template that works with standard persona structure while encouraging B2B-specific enhancements',
        tags: ['b2b', 'professional', 'business', 'enterprise', 'flexible'],
        isActive: true,
        supportedLLMs: ['gpt-4', 'gpt-3.5-turbo', 'claude-3', 'gemini-pro']
    }
};

/**
 * Validates B2B occupation for professional relevance
 */
function validateB2BOccupation() {
    return (value: any, context: any) => {
        const errors: any[] = [];
        const warnings: any[] = [];
        const startTime = Date.now();

        // Ultra-permissive: accept any value or no value
        if (value === undefined || value === null) {
            // No warning for missing occupation
        } else if (typeof value !== 'string') {
            warnings.push({
                id: 'occupation-invalid-type',
                type: 'TYPE_MISMATCH',
                field: 'occupation',
                message: 'Occupation should be a string',
                severity: 'WARNING',
                value,
                expectedValue: 'String',
                context: {}
            });
        } else if (value.trim().length === 0) {
            // No warning for empty occupation
        } else {
            const occupation = value.trim().toLowerCase();
            
            // Check for B2B-relevant professional terms (optional)
            const b2bKeywords = [
                'manager', 'director', 'lead', 'head', 'chief', 'vp', 'vice president',
                'executive', 'officer', 'coordinator', 'specialist', 'analyst',
                'consultant', 'advisor', 'architect', 'engineer', 'developer',
                'project', 'product', 'business', 'sales', 'marketing', 'operations',
                'finance', 'hr', 'human resources', 'it', 'technology', 'digital'
            ];

            const hasB2BKeyword = b2bKeywords.some(keyword => 
                occupation.includes(keyword)
            );

            if (!hasB2BKeyword) {
                // No warning - accept any occupation
            }

            // Check for unprofessional terms (optional)
            const unprofessionalTerms = ['ninja', 'rockstar', 'guru', 'wizard', 'hacker'];
            const hasUnprofessionalTerm = unprofessionalTerms.some(term => 
                occupation.includes(term)
            );
            
            if (hasUnprofessionalTerm) {
                // No warning - accept informal terms
            }
        }

        const validationTime = Date.now() - startTime;

        return {
            isValid: true, // Always valid
            errors,
            warnings,
            score: 100, // Always perfect score
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                validationTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
        };
    };
}

/**
 * Validates B2B pain points for business relevance
 */
function validateB2BPainPoints() {
    return (value: any, context: any) => {
        const errors: any[] = [];
        const warnings: any[] = [];
        const startTime = Date.now();

        // Ultra-permissive: accept any value or no value
        if (!value) {
            // No warning for missing pain points
        } else if (!Array.isArray(value)) {
            warnings.push({
                id: 'pain-points-invalid-type',
                type: 'TYPE_MISMATCH',
                field: 'painPoints',
                message: 'Pain points should be an array',
                severity: 'WARNING',
                value,
                expectedValue: 'Array of pain points',
                context: {}
            });
        } else if (value.length === 0) {
            // No warning for empty array
        } else {
            // Accept any pain points without validation
            value.forEach((painPoint, index) => {
                if (typeof painPoint !== 'string') {
                    // No warning for non-string pain points
                }
            });
        }

        const validationTime = Date.now() - startTime;

        return {
            isValid: true, // Always valid
            errors,
            warnings,
            score: 100, // Always perfect score
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                validationTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
        };
    };
}

/**
 * Validates B2B goals for business orientation
 */
function validateB2BGoals() {
    return (value: any, context: any) => {
        const errors: any[] = [];
        const warnings: any[] = [];
        const startTime = Date.now();

        // Ultra-permissive: accept any value or no value
        if (!value) {
            // No warning for missing goals
        } else if (!Array.isArray(value)) {
            warnings.push({
                id: 'goals-invalid-type',
                type: 'TYPE_MISMATCH',
                field: 'goals',
                message: 'Goals should be an array',
                severity: 'WARNING',
                value,
                expectedValue: 'Array of goals',
                context: {}
            });
        } else if (value.length === 0) {
            // No warning for empty array
        } else {
            // Accept any goals without validation
            value.forEach((goal, index) => {
                if (typeof goal !== 'string') {
                    // No warning for non-string goals
                }
            });
        }

        const validationTime = Date.now() - startTime;

        return {
            isValid: true, // Always valid
            errors,
            warnings,
            score: 100, // Always perfect score
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                validationTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
        };
    };
}

/**
 * Validates B2B marketing insights
 */
function validateB2BMarketingInsights() {
    return (value: any, context: any) => {
        const errors: any[] = [];
        const warnings: any[] = [];
        const startTime = Date.now();

        if (!value || typeof value !== 'object') {
            warnings.push({ // Changed from errors to warnings
                id: 'marketing-insights-invalid',
                type: 'TYPE_MISMATCH',
                field: 'marketingInsights',
                message: 'Marketing insights should be an object',
                severity: 'WARNING', // Changed from ERROR to WARNING
                value,
                expectedValue: 'Object with marketing insights',
                context: {}
            });
        } else {
            // Check for B2B-relevant channels
            if (value.preferredChannels && Array.isArray(value.preferredChannels)) {
                const b2bChannels = ['linkedin', 'email', 'webinar', 'conference', 'trade show', 'case study', 'white paper'];
                const hasB2BChannel = value.preferredChannels.some((channel: string) => 
                    b2bChannels.some(b2bChannel => 
                        channel.toLowerCase().includes(b2bChannel)
                    )
                );

                if (!hasB2BChannel) {
                    warnings.push({
                        id: 'marketing-channels-not-b2b',
                        field: 'marketingInsights.preferredChannels',
                        message: 'Preferred channels may not be B2B-focused',
                        value: value.preferredChannels,
                        suggestion: 'Consider including B2B channels like LinkedIn, email, webinars, conferences'
                    });
                }
            }

            // Check for B2B-relevant messaging tone
            if (value.messagingTone && typeof value.messagingTone === 'string') {
                const b2bTones = ['professional', 'consultative', 'expert', 'informative', 'data-driven', 'solution-focused'];
                const toneLower = value.messagingTone.toLowerCase();
                const hasB2BTone = b2bTones.some(tone => 
                    toneLower.includes(tone)
                );

                if (!hasB2BTone) {
                    warnings.push({
                        id: 'messaging-tone-not-b2b',
                        field: 'marketingInsights.messagingTone',
                        message: 'Messaging tone may not be B2B-appropriate',
                        value: value.messagingTone,
                        suggestion: 'Consider professional, consultative, or expert tone for B2B context'
                    });
                }
            }
        }

        const validationTime = Date.now() - startTime;

        return {
            isValid: true, // Always valid since we only have warnings now
            errors,
            warnings,
            score: warnings.length === 0 ? 100 : Math.max(70, 100 - warnings.length * 10), // Minimum score of 70
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                validationTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
        };
    };
}

/**
 * Validates optional company structure (if present)
 */
function validateOptionalCompanyStructure() {
    return (value: any, context: any) => {
        const errors: any[] = [];
        const warnings: any[] = [];
        const startTime = Date.now();

        // Only validate if company field is present
        if (!value) {
            // Company field is optional, so no error
        return {
                isValid: true,
                errors: [],
                warnings: [],
                score: 100,
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                    validationTime: Date.now() - startTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
            };
        }

        if (typeof value !== 'object') {
            warnings.push({
                id: 'company-structure-invalid-type',
                field: 'company',
                message: 'Company should be an object if provided',
                value,
                suggestion: 'Provide company information as an object with name, size, industry, etc.'
            });
        } else {
            // Validate company fields if present
            const recommendedFields = ['name', 'size', 'industry', 'location'];
            recommendedFields.forEach(field => {
                if (!value[field]) {
                warnings.push({
                        id: `company-${field}-missing`,
                        field: `company.${field}`,
                        message: `Company ${field} is recommended for B2B personas`,
                        value: undefined,
                        suggestion: `Include company ${field} for more complete B2B profile`
                    });
                }
            });
        }

        const validationTime = Date.now() - startTime;

        return {
            isValid: errors.length === 0,
            errors,
            warnings,
            score: errors.length === 0 ? (warnings.length === 0 ? 100 : 85) : 0,
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                validationTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
        };
    };
}

/**
 * Validates optional professional profile (if present)
 */
function validateOptionalProfessionalProfile() {
    return (value: any, context: any) => {
        const errors: any[] = [];
        const warnings: any[] = [];
        const startTime = Date.now();

        // Only validate if professionalProfile field is present
        if (!value) {
            // ProfessionalProfile field is optional, so no error
        return {
                isValid: true,
                errors: [],
                warnings: [],
                score: 100,
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                    validationTime: Date.now() - startTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
            };
        }

        if (typeof value !== 'object') {
                warnings.push({
                id: 'professional-profile-invalid-type',
                field: 'professionalProfile',
                message: 'Professional profile should be an object if provided',
                value,
                suggestion: 'Provide professional profile as an object with experience, skills, responsibilities, etc.'
                });
            } else {
            // Validate professional profile fields if present
            const recommendedFields = ['experience', 'skills', 'responsibilities'];
            recommendedFields.forEach(field => {
                if (!value[field]) {
                        warnings.push({
                        id: `professional-profile-${field}-missing`,
                        field: `professionalProfile.${field}`,
                        message: `Professional ${field} is recommended for B2B personas`,
                        value: undefined,
                        suggestion: `Include professional ${field} for more complete B2B profile`
                        });
                    }
                });
        }

        const validationTime = Date.now() - startTime;

        return {
            isValid: errors.length === 0,
            errors,
            warnings,
            score: errors.length === 0 ? (warnings.length === 0 ? 100 : 85) : 0,
            metadata: {
                templateId: context.templateVariables?.templateId || 'b2b-persona-v1',
                templateVersion: '1.0.0',
                validationTime,
                rulesExecuted: 1,
                rulesSkipped: 0,
                timestamp: Date.now()
            }
        };
    };
}