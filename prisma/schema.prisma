generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Persona {
  id                   String   @id @default(uuid())
  name                 String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  age                  Int
  culturalData         Json
  demographics         Json
  goals                String[]
  location             String
  marketingInsights    Json
  socialMediaInsights  Json?
  occupation           String
  painPoints           String[]
  psychographics       Json
  qualityScore         Float
  userId               String
  bio                  String?
  metadata             Json?
  quote                String?
  email                String?
  phone                String?
  
  // Enhanced metadata columns
  generationMetadata   Json?
  validationMetadata   Json?
  culturalDataSource   String?  @default("unknown") @db.VarChar(50)
  templateUsed         String?  @db.VarChar(100)
  processingTime       Int?
  
  user                 User     @relation(fields: [userId], references: [id])
  
  // Indexes for efficient filtering and sorting
  @@index([culturalDataSource], name: "idx_persona_cultural_source")
  @@index([templateUsed], name: "idx_persona_template_used")
  @@index([processingTime], name: "idx_persona_processing_time")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model Plan {
  id               String   @id @default(uuid())
  name             String   @unique
  monthlyPrice     String
  annualPrice      String
  period           String
  description      String
  features         String[]
  cta              String
  ctaLink          String
  popular          Boolean
  color            String
  personasLimit    Int?
  exports          String[]
  support          String
  apiAccess        Boolean
  culturalInsights Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  users            User[]
}

model User {
  id          String           @id @default(uuid())
  email       String           @unique
  name        String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  planId      String?
  personas    Persona[]
  briefs      SavedBrief[]
  plan        Plan?            @relation(fields: [planId], references: [id])
  preferences UserPreferences?
  roles       UserRole[]
}

model UserPreferences {
  id               String   @id @default(uuid())
  userId           String   @unique
  theme            String   @default("light")
  language         String   @default("fr")
  autoSave         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  generationsCount Int      @default(0)
  user             User     @relation(fields: [userId], references: [id])
}

model SavedBrief {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
